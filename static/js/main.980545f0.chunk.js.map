{"version":3,"sources":["components/AuthHelperMethods.js","App.js","components/withAuth.js","login.js","serviceWorker.js","index.js"],"names":["AuthHelperMethods","domain","_this","this","Object","classCallCheck","login","username","password","fetch","concat","method","mode","body","then","res","console","log","setToken","access","Promise","resolve","loggedIn","token","getToken","isTokenExpired","decode","exp","Date","now","err","idToken","localStorage","setItem","getItem","logout","removeItem","getConfirm","answer","url","options","headers","Content-Type","objectSpread","response","json","_checkStatus","status","error","Error","statusText","withAuth","AuthComponent","Auth","_Component","AuthWrapped","_getPrototypeOf2","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","confirm","loaded","inherits","createClass","key","value","setState","props","history","replace","react_default","a","createElement","Component","_handleLogout","name","className","onClick","Login","_handleChange","e","defineProperty","target","handleFormSubmit","preventDefault","alert","catch","Fragment","placeholder","type","onChange","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","BrowserRouter","Route","exact","path","component","App","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.980545f0.chunk.js","sourcesContent":["import decode from 'jwt-decode';\r\n\r\nexport default class AuthHelperMethods {\r\n    constructor(domain) {\r\n        this.domain = domain || 'https://pathrocle.pythonanywhere.com'\r\n    }\r\n\r\n    login = (username, password) => {\r\n        return this.fetch(`${this.domain}/api/auth/token/obtain/`, {\r\n            method: 'POST',\r\n            mode: 'no-cors',\r\n            body: {\r\n                username,\r\n                password\r\n            }\r\n        }).then(res => {\r\n            console.log(res);\r\n            this.setToken(res.access)\r\n            return Promise.resolve(res)\r\n        })\r\n    }\r\n\r\n    loggedIn = () => {\r\n        // Checks if there is a saved token and it's still valid\r\n        const token = this.getToken(); // Getting token from localstorage\r\n        return !!token && !this.isTokenExpired(token); // handwaiving here\r\n    };\r\n    \r\n    isTokenExpired = token => {\r\n        try {\r\n          const decoded = decode(token);\r\n          if (decoded.exp < Date.now() / 1000) {\r\n            // Checking if token is expired.\r\n            return true;\r\n          } else return false;\r\n        } catch (err) {\r\n          console.log(err, \"expired check failed! Line 42: AuthService.js\");\r\n          return false;\r\n        }\r\n    };\r\n    \r\n\r\n    setToken = idToken => {\r\n        // Saves user token to localStorage\r\n        localStorage.setItem(\"id_token\", idToken);\r\n      };\r\n    \r\n      getToken = () => {\r\n        // Retrieves the user token from localStorage\r\n        return localStorage.getItem(\"id_token\");\r\n      };\r\n    \r\n      logout = () => {\r\n        // Clear user token and profile data from localStorage\r\n        localStorage.removeItem(\"id_token\");\r\n      };\r\n    \r\n      getConfirm = () => {\r\n        // Using jwt-decode npm package to decode the token\r\n        let answer = decode(this.getToken());\r\n        console.log(\"Recieved answer!\");\r\n        return answer;\r\n      };  \r\n\r\n      fetch = (url, options) => {\r\n        // performs api calls sending the required authentication headers\r\n        console.log(url, options);\r\n        const headers = {\r\n          \"Content-Type\": \"application/json\"\r\n        };\r\n        // Setting Authorization header\r\n        // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\r\n        if (this.loggedIn()) {\r\n          headers[\"Authorization\"] = \"Bearer \" + this.getToken();\r\n        }\r\n    \r\n        return fetch(url, {\r\n          headers,\r\n          ...options\r\n        })\r\n        .then(response => response.json());\r\n      };\r\n    \r\n      _checkStatus = response => {\r\n        // raises an error in case response status is not a success\r\n        if (response.status >= 200 && response.status < 300) {\r\n          // Success status lies between 200 to 300\r\n          return response;\r\n        } else {\r\n          var error = new Error(response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      };        \r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport AuthHelperMethods from './components/AuthHelperMethods';\nimport withAuth from './components/withAuth';\n\nclass App extends Component {\n\n  Auth = new AuthHelperMethods();\n  /* Create a new instance of the 'AuthHelperMethods' compoenent*/\n  state = {\n    username: \"\",\n    password: \"\"\n  }\n\n/* Here will want to add a method to log the user out upon clicking 'Logout' */\n  _handleLogout = () => {\n    \n    this.Auth.logout();\n    this.props.history.replace('/login');\n  }\n\n  //Render the protected component\n  render() {\n    let name = null;\n\n    //This will be null until we set up authentication...\n    if (this.props.confirm) {\n      name = this.props.confirm.username;\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"main-page\">\n          <div className=\"top-section\">\n            <h1>Welcome, {name}</h1>\n          </div>\n          <div className=\"bottom-section\">\n            <button onClick={this._handleLogout}>LOGOUT</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n//In order for this component to be protected, we must wrap it with what we call a 'Higher Order Component' or HOC.\nexport default withAuth(App);","import React, { Component } from \"react\";\r\nimport AuthHelperMethods from \"./AuthHelperMethods\";\r\n\r\nexport default function withAuth(AuthComponent) {\r\n    const Auth = new AuthHelperMethods();\r\n\r\n\r\n    return class AuthWrapped extends Component {\r\n        state = {\r\n          confirm: null,\r\n          loaded: false\r\n        };\r\n\r\n        componentDidMount() {\r\n            if (!Auth.loggedIn()) {\r\n              this.props.history.replace(\"/login\");\r\n            } else {\r\n              /* Try to get confirmation message from the Auth helper. */\r\n              try {\r\n                const confirm = Auth.getConfirm();\r\n                console.log(\"confirmation is:\", confirm);\r\n                this.setState({\r\n                  confirm: confirm,\r\n                  loaded: true\r\n                });\r\n              } catch (err) {\r\n                /* Oh snap! Looks like there's an error so we'll print it out and log the user out for security reasons. */\r\n                console.log(err);\r\n                Auth.logout();\r\n                this.props.history.replace(\"/login\");\r\n              }\r\n            }\r\n          } \r\n             \r\n          render() {\r\n            if (this.state.loaded == true) {\r\n              if (this.state.confirm) {\r\n                console.log(\"confirmed!\");\r\n                return (\r\n                  /* component that is currently being wrapper(App.js) */\r\n                  <AuthComponent\r\n                    history={this.props.history}\r\n                    confirm={this.state.confirm}\r\n                  />\r\n                );\r\n              } else {\r\n                console.log(\"not confirmed!\");\r\n                return null;\r\n              }\r\n            } else {\r\n              return null;\r\n            }\r\n          }\r\n        };    \r\n}","import React, { Component } from \"react\";\r\n\r\n/* We want to import our 'AuthHelperMethods' component in order to send a login request */\r\nimport AuthHelperMethods from './components/AuthHelperMethods';\r\nimport './login.css'\r\n\r\n\r\nclass Login extends Component {\r\n\r\n    /* In order to utilize our authentication methods within the AuthService class, we want to instantiate a new object */\r\n    Auth = new AuthHelperMethods();\r\n    state = {\r\n        username: \"\",\r\n        password: \"\"\r\n    }\r\n\r\n    /* Fired off every time the use enters something into the input fields */\r\n    _handleChange = (e) => {\r\n        this.setState(\r\n            {\r\n                [e.target.name]: e.target.value\r\n            }\r\n        )\r\n    }\r\n\r\n    handleFormSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.Auth.login(this.state.username, this.state.password)\r\n        .then(res => {\r\n          console.log(res);\r\n          if (res === false) {\r\n            return alert(\"Sorry those credentials don't exist!\");\r\n          }\r\n          this.props.history.replace(\"/\");\r\n        })\r\n        .catch(err => {\r\n          alert(err);\r\n        });\r\n        /* Here is where all the login logic will go. Upon clicking the login button, we would like to utilize a login method that will send our entered credentials over to the server for verification. Once verified, it should store your token and send you to the protected route. */\r\n    }\r\n\r\n    componentWillMount() {\r\n\r\n        /* Here is a great place to redirect someone who is already logged in to the protected route */\r\n        if (this.Auth.loggedIn()){\r\n            this.props.history.replace('/');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"main-wrapper\">\r\n                    <div className=\"box\">\r\n                        <div className=\"box-header\">\r\n                            <h1>po/co</h1>\r\n                        </div>\r\n                        <form className=\"box-form\">\r\n                            <input\r\n                                className=\"form-item\"\r\n                                placeholder=\"Username\"\r\n                                name=\"username\"\r\n                                type=\"text\"\r\n                                onChange={this._handleChange}\r\n                            />\r\n                            <input\r\n                                className=\"form-item\"\r\n                                placeholder=\"Password\"\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                onChange={this._handleChange}\r\n                            />\r\n                            <button className=\"form-submit\" onClick={this.handleFormSubmit}>Login</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                \r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Login;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport Login from './login'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Router>     \n        <div>\n            <Route exact path=\"/\" component={App} />\n            <Route exact path=\"/login\" component={Login} />\n        </div>\n    </Router>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}